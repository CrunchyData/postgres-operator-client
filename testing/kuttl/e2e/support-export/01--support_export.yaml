---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
- script: kubectl-pgo --namespace $NAMESPACE support export kuttl-support-cluster -o .
- script: tar -xf ./crunchy_k8s_support_export_*.tar.gz
- script: |
    #!/bin/bash

    CLEANUP="rm -r ./kuttl-support-cluster ./crunchy_k8s_support_export_*.tar.gz"

    # check that the PGO CLI version is recorded
    VER=$(cat ./kuttl-support-cluster/pgo-cli-version)
    [[ "$VER" =~ v[0-9]+.[0-9]+.[0-9]+$ ]] || {
      echo "Expected PGO CLI version, got:"
      echo "${VER}"
      eval "$CLEANUP"
      exit 1
    }

    # check that the context file exist and is not empty
    if [[ ! -s ./kuttl-support-cluster/current-context ]]
    then
      echo "Expected context file to not be empty"
      eval "$CLEANUP"
      exit 1
    fi


    # check for expected gzip compression level
    FILE_INFO=$(file ./crunchy_k8s_support_export_*.tar.gz)
    [[ "${FILE_INFO}" == *'gzip compressed data, max compression'* ]] || {
      echo "Expected gzip max compression message, got:"
      echo "${FILE_INFO}"
      eval "$CLEANUP"
      exit 1
    }

    # Node directory and list file path
    DIR="./kuttl-support-cluster/nodes/"
    LIST="${DIR}list"

    # check for expected table header in the list file
    KV=$(awk 'NR==1 {print $9}' $LIST)
    [[ "${KV}" == '|KERNEL-VERSION' ]] || {
      echo "Expected KERNEL-VERSION header, got:"
      echo "${KV}"
      eval "$CLEANUP"
      exit 1
    }

    # check for a .yaml file with the name of the first Node in the list file
    NODE="$(awk 'NR==2 {print $1}' $LIST).yaml"

    if [ ! -f "${DIR}${NODE}" ]
    then
      echo "Expected directory with file ${NODE}, got:"
      ls ${DIR}
      eval "$CLEANUP"
      exit 1
    fi

    # check that the events file exist and is not empty
    EVENTS="./kuttl-support-cluster/events"

    if [[ ! -s $EVENTS ]]
    then
      echo "Expected Events file to not be empty"
      eval "$CLEANUP"
      exit 1
    fi

    # check that the events file contains the expected string
    if ! grep -Fq "Created container postgres-startup" $EVENTS
    then
      echo "Events file does not contain expected string"
      eval "$CLEANUP"
      exit 1
    fi

    PROCESSES_DIR="./kuttl-support-cluster/processes/"

    # Check for the files that contain an expected pgBackRest server process.
    # Expected to be found in the Postgres instance Pod's 'database',
    # 'replication-cert-copy', 'pgbackrest', and 'pgbackrest-config' containers
    # and the pgBackRest repo Pod's 'pgbackrest' and 'pgbackrest-config'
    # containers, i.e. 6 files total, but test will pass if at least one is found.
    found=$(grep -lR "pgbackrest server" ${PROCESSES_DIR} | wc -l)
    if [ "${found}" -lt 1 ]; then
      echo "Expected to find pgBackRest process, got ${found}"
      eval "$CLEANUP"
      exit 1
    fi

    # Check for the files that contain an expected Postgres process. Expected
    # to be found in the Postgres instance Pod's 'database', 'replication-cert-copy',
    # 'pgbackrest', and 'pgbackrest-config' containers, i.e. 4 files total, but
    # test will pass if at least one is found.
    found=$(grep -lR "postgres -D /pgdata/pg" ${PROCESSES_DIR} | wc -l)
    if [ "${found}" -lt 1 ]; then
      echo "Expected to find Postgres process, got ${found}"
      eval "$CLEANUP"
      exit 1
    fi

    # check that the PGO CLI log file contains expected messages
    CLI_LOG="./kuttl-support-cluster/logs/cli"

    # info output includes expected heading
    if ! grep -Fq -- "- INFO - | PGO CLI Support Export Tool" $CLI_LOG
    then
      echo "PGO CLI log does not contain expected info message"
      eval "$CLEANUP"
      exit 1
    fi

    # debug output includes cluster name argument
    if ! grep -Fq -- "- DEBUG - Arg - PostgresCluster Name: kuttl-support-cluster" $CLI_LOG
    then
      echo "PGO CLI log does not contain cluster name debug message"
      eval "$CLEANUP"
      exit 1
    fi

- script: rm -r ./kuttl-support-cluster ./crunchy_k8s_support_export_*.tar.gz
