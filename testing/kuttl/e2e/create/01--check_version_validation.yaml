---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  - script: |
     # Verify the error when the Postgres version given is too low.
     # Note: case is used here and below as it allows for the use of a
     # wildcard (*) and is POSIX compliant
     TOO_LOW=$(kubectl-pgo create postgrescluster --pg-major-version=1 toolow 2>&1)
     case "${TOO_LOW}" in
     "Error:"*"Invalid value"*)
         ;;
     *)
         printf 'Expected invalid value error, got %s\n' "${TOO_LOW}"
         exit 1
         ;;
     esac

     # Verify the error when the Postgres version given is too high.
     TOO_HIGH=$(kubectl-pgo create postgrescluster --pg-major-version=100 toohigh 2>&1)
     case "${TOO_HIGH}" in
     "Error:"*"Invalid value"*)
         ;;
     *)
         printf 'Expected invalid value error, got %s\n' "${TOO_HIGH}"
         exit 1
         ;;
     esac

     # Verify the error when the Postgres version is not an integer.
     NOT_INT=$(kubectl-pgo create postgrescluster --pg-major-version=14.1 notint 2>&1)
     case "${NOT_INT}" in
     "Error: invalid argument"*)
         ;;
     *)
         printf 'Expected invalid value error, got %s\n' "${NOT_INT}"
         exit 1
         ;;
     esac

     # Verify the error when the Postgres version is not a number.
     NOT_NUM=$(kubectl-pgo create postgrescluster --pg-major-version=x notnum 2>&1)
     case "${NOT_NUM}" in
     "Error: invalid argument"*)
         ;;
     *)
         printf 'Expected invalid value error, got %s\n' "${NOT_NUM}"
         exit 1
         ;;
     esac

     # Verify the error when the Postgres version flag is not provided.
     MISSING=$(kubectl-pgo create postgrescluster missing 2>&1)
     case "${MISSING}" in
     "Error: required flag"*)
         ;;
     *)
         printf 'Expected required flag error, got %s\n' "${MISSING}"
         exit 1
         ;;
     esac

     # Verify the error when the Postgres version value is empty.
     NOT_SET=$(kubectl-pgo create postgrescluster --pg-major-version=  notset 2>&1)
     case "${NOT_SET}" in
     "Error: invalid argument"*)
         ;;
     *)
         printf 'Expected invalid argument error, got %s\n' "${NOT_SET}"
         exit 1
         ;;
     esac
